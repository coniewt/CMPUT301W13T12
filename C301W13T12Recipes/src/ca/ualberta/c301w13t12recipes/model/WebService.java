package ca.ualberta.c301w13t12recipes.model;

/*******************************************************************************
 * Copyright (c) 2012 Jason Reddekopp, Andrew McCann, Daniel Sopel, David Yu.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * Contributors:
 *     Jason Reddekopp, Andrew McCann, Daniel Sopel, David Yu - initial API and                              
 *     implementation
 ******************************************************************************/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;




/**
 * This class is mainly responsive webservice, which provide the access to web
 * server and fetch the data from the server
 * @author YUWEI DUAN
 * @version 1.0
 */
public class WebService
{
	
	/**
	 * Used for interacting with the crowdsourcer web service.  Allows for storing/updating/listing Recipes and 
	 * adding responses.
	 * 
	 * Sends information to web service through HTTP requests containing JSON content.  JSON content is 
	 * generated by serializing Recipes into JSON objects.  This class also de-serializes JSON objects 
	 * from the web service into Recipes.  
	 *   
	 * TODO: pictures, audio, and add a better place for uri string literal
	 */
	
	// need to add a resource for this
	private static String uri = StrResource.uri;

	/* public methods */
	
	/**
	 * Adds a Recipe to the web server.  
	 * @param Recipe to be added
	 * @return The Recipe received from web server with id included
	 */
	public static Recipe put(Recipe Recipe)
	{
		try
		{	
			//get data string
			String dataString = getDataString(toJson(Recipe), "post");

			//setup connection
			HttpURLConnection conn = setupConnections();
		
			// Send data and get response
			String httpResponse = getHttpResponse(conn, dataString);
			
			// convert string response to json object
			JSONObject jsonObject = toJsonRecipe(httpResponse);
			
			// convert json object to Recipe and return
			return toRecipe(jsonObject);
		}
		catch (JSONException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (UnsupportedEncodingException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Deletes a Recipe from the web server.
	 * @param Recipe to be deleted.
	 * @return true if deleted, false if not
	 */
	public static boolean delete(String id)
	{
		try
		{
			if(id.contains("local"))
			{
				return false;
			}
			//get data string
			String dataString = getDataString(id, "remove");

			//setup connection
			HttpURLConnection conn = setupConnections();

			//send data and get response
			String httpResponse = getHttpResponse(conn, dataString);
			
			//convert response to json object
			JSONObject jsonObject = new JSONObject(httpResponse);
			
			//return true if Recipe was deleted, false if otherwise
			return jsonObject.getString("message").equals("removes") ? true : false;
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Gets a Recipe (if exists) from the web server.
	 * @param id to search for
	 * @return Recipe found, if nothing found returns null.
	 */
	public static Recipe get(String id)
	{
		try
		{
			//Construct data string
			String data =  getDataString(id, "get");

			// Setup Connection
			HttpURLConnection conn = setupConnections(); 

			// Send data and get response
			String httpResponse = getHttpResponse(conn,data);
			
			// convert string response to json object
			JSONObject jsonObject = toJsonRecipe(httpResponse);
			
			// convert json object to Recipe and return
			return toRecipe(jsonObject);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		return null;
	}


	/**
	 * Posts a Recipe on the web server, used when response needs to be added.  
	 * @param Recipe to be updated
	 * @param response response to be added
	 * @return updated Recipe.
	 */
	public static Recipe post(Recipe Recipe, Response response)
	{
		try
		{	
			//get current version of Recipe from webservice
			Recipe webRecipe = get(Recipe.getId());

			// add new response
			webRecipe.addResponse(response);
			
			// get data string
			String dataString = getDataString(toJson(webRecipe), "update");

			// setup connection
			HttpURLConnection conn = setupConnections();
			
			// send data and get response
			String httpResponse = getHttpResponse(conn, dataString);
			
			// convert string response to json object
			JSONObject jsonObject = toJsonRecipe(httpResponse);
			
			// convert json object to Recipe and return
			return toRecipe(jsonObject);
		}
		catch (JSONException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (UnsupportedEncodingException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Erases everything form web service.
	 * @param key Password
	 * @return String response
	 */
	public static String nuke(String key)
	{	
		try
		{
			//Construct data string
			String data =  URLEncoder.encode("action","UTF8")  + "=" + URLEncoder.encode("nuke","UTF8");
			data += "&" + URLEncoder.encode("key","UTF8")  + "=" + URLEncoder.encode(key,"UTF8");
			
			// Setup Connection
			HttpURLConnection conn = setupConnections(); 

			// Send data and get response
			return getHttpResponse(conn,data);
		}
		catch (UnsupportedEncodingException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;

	}

	/**
	 * Gets all Recipes from web server.
	 * @return List<Recipe> of all Recipes on web server.
	 */
	public static List<Recipe> list()
	{
		try
		{
			String dataString = getDataString((JSONObject)null, "list");

			//setup connection
			HttpURLConnection conn = setupConnections();

			//send data and get response
			String httpResponse = getHttpResponse(conn, dataString);
			
			//convert response to json array
			JSONArray jsonArray = new JSONArray(httpResponse);
			
			return fromJsonArray(jsonArray);
		}
		catch (UnsupportedEncodingException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (UnsupportedOperationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (JSONException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/* private methods */

	/**
	 * returns a list of Recipes from a jsonArray
	 * @param jsonArray of Recipe objects
	 * @return List<Recipe>
	 * @throws JSONException
	 */
	private static List<Recipe> fromJsonArray(JSONArray jsonArray) throws JSONException
	{

		List<Recipe> Recipes = new ArrayList<Recipe>();
		for(int i = 0; i < jsonArray.length(); i++)
		{
			String id = jsonArray.getJSONObject(i).getString("id");
			Recipes.add(get(id));
		}
		return Recipes;
	}

	/**
	 * Sets up http connection to the web server and returns the connection.
	 * @return HttpURLConnection
	 * @throws IOException
	 */
	private static HttpURLConnection setupConnections() throws IOException
	{
		// Send data
		URL url = new URL(uri);
		HttpURLConnection conn = (HttpURLConnection)url.openConnection();
		conn.setDoOutput(true);
		conn.setDoOutput(true);
		return conn;
	}

	/**
	 * Sets up http connection to the web server and returns the connection.
	 * @param conn URLConnection
	 * @param data string to send to web service.
	 * @return String response from web service.
	 * @throws IOException
	 */
	private static String getHttpResponse(URLConnection conn, String data) throws IOException
	{
		OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
		wr.write(data);
		wr.flush(); 
		wr.close(); 

		BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		String line, httpResponse = "";
		while ((line = rd.readLine()) != null) {
			// Process line...
			httpResponse += line;
		}
		rd.close();
		return httpResponse;
	}
	
	/**
	 * Converts json string into a Recipe object and returns.
	 * @param jsonRecipe , Recipe object in json format.
	 * @return Recipe
	 * @throws JSONException
	 */
	private static Recipe toRecipe(JSONObject jsonRecipe) throws JSONException
	{
		if(jsonRecipe==null)
		{
			return null;
		}
		else
		{
			return new Recipe(jsonRecipe.getString("id"), jsonRecipe.getString("user"), jsonRecipe.getString("name")
					,jsonRecipe.getJSONArray("Ingredients"),);
		}
	}

	/**
	 * Gets list of responses from jsonObject and returns
	 * @param jsonRecipe , Recipe object in json format.
	 * @return List<Response>
	 * @throws JSONException
	 */
	private static List<Response> toResponses(JSONObject jsonRecipe) throws JSONException
	{
		try
		{
			JSONArray jsonArray = jsonRecipe.getJSONArray("responses");
			List<Response> responses = new ArrayList<Response>();
			String type = jsonRecipe.getString("type");
			
			ResponseFactory respFactory;
			
			if(type.equals(TextResponse.class.toString())){
				respFactory = new TextResponseFactory();
			} else if (type.equals(PictureResponse.class.toString())) {
				respFactory = new PictureResponseFactory();
			} else {
				throw new UnsupportedOperationException("Not implemented");
			}
			
			for(int i = 0; i < jsonArray.length(); i++)
			{

				Response resp = respFactory.createResponse(jsonArray.getJSONObject(i).getString("annotation"), jsonArray.getJSONObject(i).getString("content"));
				resp.setTimestamp(new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy").parse(jsonArray.getJSONObject(i).getString("timestamp")));
				responses.add(resp);

			}

			return responses;
		}
		catch(ParseException e)
		{
			System.err.println("Could not parse date");
			e.printStackTrace();
		}
		return null;
	}

	/** 
	 * Constructs a data string to send to the web server.
	 * @param jsonRecipe , Recipe object in json format.
	 * @param action , http request method
	 * @return URLEncoded request string
	 * @throws UnsupportedEncodingException
	 * @throws JSONException
	 * @throws UnsupportedOperationException
	 */
	private static String getDataString(JSONObject jsonRecipe, String action) throws UnsupportedEncodingException, JSONException, UnsupportedOperationException
	{
		String data =  URLEncoder.encode("action","UTF8")  + "=" + URLEncoder.encode(action,"UTF8");
		if(action.equals("post"))
		{
			if(!jsonRecipe.isNull("id"))
			{
				data += "&" + URLEncoder.encode("id","UTF8")  + "=" + URLEncoder.encode(jsonRecipe.getString("id"),"UTF8");
			}
			data += "&" + URLEncoder.encode("content","UTF8")  + "=" + URLEncoder.encode(jsonRecipe.toString(),"UTF8");
			return data;
		}
		else if(action.equals("update"))
		{
			data += "&" + URLEncoder.encode("id","UTF8")  + "=" + URLEncoder.encode(jsonRecipe.getString("id"),"UTF8");
			data += "&" + URLEncoder.encode("content","UTF8")  + "=" + URLEncoder.encode(jsonRecipe.toString(),"UTF8");
			return data;
		}
		else if(action.equals("list"))
		{
			return data;
		}
		else
		{
			throw new UnsupportedOperationException();
		}
	}

	/**
	 * Overload, for remove and get
	 * @param id of Recipe
	 * @param action http request method
	 * @return String http request string
	 * @throws UnsupportedEncodingException
	 */
	private static String getDataString(String id, String action) throws UnsupportedEncodingException
	{
		String data =  URLEncoder.encode("action","UTF8")  + "=" + URLEncoder.encode(action,"UTF8");
		data += "&" + URLEncoder.encode("id","UTF8")  + "=" + URLEncoder.encode(id,"UTF8");
		return data;
	}

	/**
	 * Parse Recipe into json object
	 * @param Recipe to be converted to json object
	 * @return JSONObject
	 * @throws JSONException
	 */
	private static JSONObject toJson(Recipe Recipe) throws JSONException
	{
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("name", Recipe.getName());
		jsonObject.put("description", Recipe.getDescription());
		
		if(Recipe.getId()!=null&&!Recipe.getId().contains("local"))
		{
			jsonObject.put("id", Recipe.getId());
		}
		jsonObject.put("type", Recipe.getType());
		jsonObject.put("status", Recipe.STATUS_SHARED);
		jsonObject.put("votes", Recipe.getVotes());

		List<Response> responses = Recipe.getResponses();
		JSONArray arr = new JSONArray();
		for(Response response : responses)
		{
			JSONObject jo = new JSONObject();
			jo.put("annotation", response.getAnnotation());
			jo.put("content", response.getSaveable());
			jo.put("timestamp", response.getTimestamp());
			arr.put(jo);
		}
		jsonObject.put("responses", arr);
		return jsonObject;
	}

	/**
	 * converts Http response from crowdsourcer into a json Recipe object 
	 * @param httpResponse
	 * @return JSONObject
	 * @throws JSONException
	 */
	private static JSONObject toJsonRecipe(String httpResponse) throws JSONException
	{
		JSONObject jsonResponse = new JSONObject(httpResponse);
		JSONObject jsonRecipe = jsonResponse.getJSONObject("content");
		jsonRecipe.put("id", jsonResponse.get("id"));
		return jsonRecipe;
	}
	
}
